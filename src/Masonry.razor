@using System.Threading
@using Soenneker.Blazor.Masonry.Abstract
@using Soenneker.Extensions.String
@using Soenneker.Extensions.CancellationTokens

@inject IMasonryInterop MasonryInterop

@inherits Soenneker.Quark.Components.Core.Cancellable.CoreCancellableElement
@implements IMasonry

<div id="@Id" @attributes="Attributes" >
    @if (HasSizer)
    {
        <div class="@($"{_sizerSelectorClass} {SizerClass}".Trim())" ></div>
    }
    @ChildContent
</div>

@code {

    [Parameter]
    public bool AutoRender { get; set; } = true;

    [Parameter]
    public string? SizerClass { get; set; }
    
    private const string _sizerSelectorClass = "masonry-sizer";

    static string SizerSelector => "." + _sizerSelectorClass;
    private bool HasSizer => SizerClass.HasContent();

    protected override void OnParametersSet()
    {
        if (Attributes != null && Attributes.TryGetValue("id", out object? idValue) && idValue is string idStr && idStr.HasContent())
        {
            Id = idStr;
        }
        else
        {
            Id = $"masonry-{Guid.NewGuid()}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoRender)
        {
            await MasonryInterop.Init(Id!, columnWidthSelector: HasSizer ? SizerSelector : null, cancellationToken: CancellationToken);
            await MasonryInterop.CreateObserver(Id!, CancellationToken);
        }
    }

    public async ValueTask Init(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await MasonryInterop.Init(Id!, columnWidthSelector: HasSizer ? SizerSelector : null, cancellationToken: linked);
            await MasonryInterop.CreateObserver(Id!, linked);
        }
    }

    public async ValueTask Layout(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await MasonryInterop.Layout(Id!, cancellationToken: linked);
    }

}
