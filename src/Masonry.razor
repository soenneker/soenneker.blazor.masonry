@using System.Threading
@using Soenneker.Blazor.Masonry.Abstract
@using Soenneker.Extensions.ValueTask
@using Soenneker.Extensions.String
@using Soenneker.Extensions.CancellationTokens

@inject IMasonryInterop MasonryInterop

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent
@implements IMasonry

<div id="@_elementId" @attributes="Attributes" >
    @if (HasSizer)
    {
        <div class="@($"{_sizerSelectorClass} {SizerClass}".Trim())" ></div>
    }
    @ChildContent
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool AutoRender { get; set; } = true;

    [Parameter]
    public string? SizerClass { get; set; }

    private string _elementId = null!;

    private const string _sizerSelectorClass = "masonry-sizer";

    static string SizerSelector => "." + _sizerSelectorClass;
    private bool HasSizer => SizerClass.HasContent();

    protected override void OnParametersSet()
    {
        if (Attributes != null && Attributes.TryGetValue("id", out object? idValue) && idValue is string idStr && idStr.HasContent())
        {
            _elementId = idStr;
        }
        else
        {
            _elementId = $"masonry-{Guid.NewGuid()}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoRender)
        {
            await MasonryInterop.Init(_elementId, columnWidthSelector: HasSizer ? SizerSelector : null, cancellationToken: CancellationToken);
            await MasonryInterop.CreateObserver(_elementId, CancellationToken);
        }
    }

    public async ValueTask Init(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await MasonryInterop.Init(_elementId, columnWidthSelector: HasSizer ? SizerSelector : null, cancellationToken: linked);
            await MasonryInterop.CreateObserver(_elementId, linked);
        }
    }

    public async ValueTask Layout(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await MasonryInterop.Layout(_elementId, cancellationToken: linked);
    }

}
